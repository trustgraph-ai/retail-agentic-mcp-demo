services:
  agent-manager:
    command:
    - agent-manager-react
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  api-gateway:
    command:
    - api-gateway
    - -p
    - pulsar://pulsar:6650
    - --timeout
    - '600'
    - --port
    - '8088'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 256M
    environment:
      GATEWAY_SECRET: ${GATEWAY_SECRET}
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    ports:
    - 8088:8088
    restart: on-failure:100
  bookie:
    command:
    - bash
    - -c
    - bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 800M
        reservations:
          cpus: '0.1'
          memory: 800M
    environment:
      BOOKIE_MEM: -Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
      advertisedAddress: bookie
      bookieId: bookie
      clusterName: cluster-a
      metadataStoreUri: metadata-store:zk:zookeeper:2181
      zkServers: zookeeper:2181
    image: docker.io/apachepulsar/pulsar:4.0.5
    ports:
    - 3181:3181
    restart: on-failure:100
    user: 0:1000
    volumes:
    - bookie:/pulsar/data/bookkeeper
  cassandra:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1000M
        reservations:
          cpus: '0.5'
          memory: 1000M
    environment:
      JVM_OPTS: -Xms300M -Xmx300M -Dcassandra.skip_wait_for_gossip_to_settle=0
    image: docker.io/cassandra:4.1.9
    ports:
    - 9042:9042
    restart: on-failure:100
    volumes:
    - cassandra:/var/lib/cassandra
  chunker:
    command:
    - chunker-recursive
    - -p
    - pulsar://pulsar:6650
    - --chunk-size
    - '1000'
    - --chunk-overlap
    - '50'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  config-svc:
    command:
    - config-svc
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  document-embeddings:
    command:
    - document-embeddings
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 512M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  document-rag:
    command:
    - document-rag
    - -p
    - pulsar://pulsar:6650
    - --doc-limit
    - '20'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  embeddings:
    command:
    - embeddings-fastembed
    - -p
    - pulsar://pulsar:6650
    - --concurrency
    - '1'
    - -m
    - sentence-transformers/all-MiniLM-L6-v2
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 400M
        reservations:
          cpus: '0.5'
          memory: 400M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  grafana:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      GF_ORG_NAME: trustgraph.ai
    image: docker.io/grafana/grafana:12.0.2
    ports:
    - 3000:3000
    restart: on-failure:100
    volumes:
    - grafana-storage:/var/lib/grafana
    - ./grafana/provisioning/:/etc/grafana/provisioning/dashboards/
    - ./grafana/provisioning/:/etc/grafana/provisioning/datasources/
    - ./grafana/dashboards/:/var/lib/grafana/dashboards/
  graph-embeddings:
    command:
    - graph-embeddings
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 512M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  graph-rag:
    command:
    - graph-rag
    - -p
    - pulsar://pulsar:6650
    - --entity-limit
    - '50'
    - --triple-limit
    - '30'
    - --max-subgraph-size
    - '400'
    - --max-path-length
    - '2'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  init-trustgraph:
    command:
    - tg-init-trustgraph
    - -p
    - http://pulsar:8080
    - --config-file
    - /trustgraph/config.json
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
    volumes:
    - ./trustgraph:/trustgraph/
  kg-extract-agent:
    command:
    - kg-extract-agent
    - -p
    - pulsar://pulsar:6650
    - --concurrency
    - '1'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  kg-extract-definitions:
    command:
    - kg-extract-definitions
    - -p
    - pulsar://pulsar:6650
    - --concurrency
    - '1'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  kg-extract-objects:
    command:
    - kg-extract-objects
    - -p
    - pulsar://pulsar:6650
    - --concurrency
    - '1'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  kg-extract-relationships:
    command:
    - kg-extract-relationships
    - -p
    - pulsar://pulsar:6650
    - --concurrency
    - '1'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  kg-manager:
    command:
    - kg-manager
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  kg-store:
    command:
    - kg-store
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  librarian:
    command:
    - librarian
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 256M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  mcp-server:
    command:
    - mcp-server
    - --port
    - '8000'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 256M
    environment:
      MCP_SERVER_SECRET: ${MCP_SERVER_SECRET}
    image: docker.io/trustgraph/trustgraph-mcp:1.2.19
    ports:
    - 8000:8000
    restart: on-failure:100
  mcp-tool:
    command:
    - mcp-tool
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  metering:
    command:
    - metering
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  metering-rag:
    command:
    - metering
    - -p
    - pulsar://pulsar:6650
    - --id
    - metering-rag
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  minio:
    command:
    - minio
    - server
    - /minio_data
    - --console-address
    - :9001
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ROOT_USER: minioadmin
    image: docker.io/minio/minio:RELEASE.2025-06-13T11-33-47Z
    ports:
    - 9000:9000
    - 9001:9001
    restart: on-failure:100
    volumes:
    - minio-data:/minio_data
  pdf-decoder:
    command:
    - pdf-decoder
    - -p
    - pulsar://pulsar:6650
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 512M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  prometheus:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/prom/prometheus:v2.53.5
    ports:
    - 9090:9090
    restart: on-failure:100
    volumes:
    - ./prometheus:/etc/prometheus/
    - prometheus-data:/prometheus
  prompt:
    command:
    - prompt-template
    - -p
    - pulsar://pulsar:6650
    - --concurrency
    - '1'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  prompt-rag:
    command:
    - prompt-template
    - -p
    - pulsar://pulsar:6650
    - --id
    - prompt-rag
    - --concurrency
    - '1'
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  pulsar:
    command:
    - bash
    - -c
    - bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 800M
        reservations:
          cpus: '0.1'
          memory: 800M
    environment:
      PULSAR_MEM: -Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
      advertisedAddress: pulsar
      advertisedListeners: external:pulsar://pulsar:6650,localhost:pulsar://localhost:6650
      clusterName: cluster-a
      managedLedgerDefaultAckQuorum: '1'
      managedLedgerDefaultEnsembleSize: '1'
      managedLedgerDefaultWriteQuorum: '1'
      metadataStoreUrl: zk:zookeeper:2181
      zookeeperServers: zookeeper:2181
    image: docker.io/apachepulsar/pulsar:4.0.5
    ports:
    - 6650:6650
    - 8080:8080
    restart: on-failure:100
  pulsar-init:
    command:
    - bash
    - -c
    - sleep 10 && bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper
      zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://pulsar:8080
      --broker-service-url pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.05'
          memory: 512M
    environment:
      PULSAR_MEM: -Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    image: docker.io/apachepulsar/pulsar:4.0.5
    restart: on-failure:100
  qdrant:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 1024M
    image: docker.io/qdrant/qdrant:v1.14.1
    ports:
    - 6333:6333
    - 6334:6334
    restart: on-failure:100
    volumes:
    - qdrant:/qdrant/storage
  query-doc-embeddings:
    command:
    - de-query-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  query-graph-embeddings:
    command:
    - ge-query-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  query-triples:
    command:
    - triples-query-cassandra
    - -p
    - pulsar://pulsar:6650
    - -g
    - cassandra
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 512M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  store-doc-embeddings:
    command:
    - de-write-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  store-graph-embeddings:
    command:
    - ge-write-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  store-objects:
    command:
    - objects-write-cassandra
    - -p
    - pulsar://pulsar:6650
    - -g
    - cassandra
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  store-triples:
    command:
    - triples-write-cassandra
    - -p
    - pulsar://pulsar:6650
    - -g
    - cassandra
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  text-completion:
    command:
    - text-completion-mistral
    - -p
    - pulsar://pulsar:6650
    - -x
    - '8000'
    - -t
    - '0.300'
    - -m
    - mistral-medium-2508
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      MISTRAL_TOKEN: ${MISTRAL_TOKEN}
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  text-completion-rag:
    command:
    - text-completion-mistral
    - -p
    - pulsar://pulsar:6650
    - --id
    - text-completion-rag
    - -x
    - '8000'
    - -t
    - '0.300'
    - -m
    - mistral-medium-2508
    - --log-level
    - DEBUG
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      MISTRAL_TOKEN: ${MISTRAL_TOKEN}
    image: docker.io/trustgraph/trustgraph-flow:1.2.19
    restart: on-failure:100
  workbench-ui:
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 256M
    image: docker.io/trustgraph/workbench-ui:1.0.6
    ports:
    - 8888:8888
    restart: on-failure:100
  zookeeper:
    command:
    - bash
    - -c
    - bin/apply-config-from-env.py conf/zookeeper.conf && bin/generate-zookeeper-config.sh
      conf/zookeeper.conf && exec bin/pulsar zookeeper
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 400M
        reservations:
          cpus: '0.05'
          memory: 400M
    environment:
      PULSAR_MEM: -Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
      metadataStoreUrl: zk:zookeeper:2181
    image: docker.io/apachepulsar/pulsar:4.0.5
    ports:
    - 2181:2181
    - 2888:2888
    - 3888:3888
    restart: on-failure:100
    user: 0:1000
    volumes:
    - zookeeper:/pulsar/data/zookeeper
volumes:
  bookie: {}
  cassandra: {}
  grafana-storage: {}
  minio-data: {}
  prometheus-data: {}
  qdrant: {}
  zookeeper: {}
